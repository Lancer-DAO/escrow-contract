diff --git a/programs/mono-program/src/constants.rs b/programs/mono-program/src/constants.rs
index 6e6aad1..d8047d9 100644
--- a/programs/mono-program/src/constants.rs
+++ b/programs/mono-program/src/constants.rs
@@ -4,14 +4,10 @@ use anchor_lang::{prelude::Pubkey, solana_program::pubkey};
 pub const MAX_NO_OF_SUBMITTERS: usize = 5;
 pub const MIN_NO_OF_SUBMITTERS: usize = 1;
 pub const MONO_DATA: &str = "mono";
-pub const LANCER_COMPLETER_TOKENS: &str = "lancer_completer_tokens";
-pub const LANCER_COMPANY_TOKENS: &str = "lancer_company_tokens";
 pub const FEE: u64 = 5;
-pub const COMPLETER_FEE: u64 = 95;//95% out of 110%
+// pub const COMPLETER_FEE: u64 = 95;//95% out of 110%
 pub const LANCER_FEE: u64 = 10;// 10 % out of 110%
 pub const THIRD_PARTY_FEE: u64 = 10;// 1% out of 110% or 10% out of lancer_fee
-pub const MINT_DECIMALS: u8 = 9;
 pub static LANCER_ADMIN: Pubkey = pubkey!("admbKYEXAPNHZbzNADk7arzf8ZbDiZ9u4qzNS3XwRXx");
-pub const MINT_AUTHORITY: &str = "mint_authority";
 pub const PERCENT: u64 = 100;
 pub const LANCER_DAO: &str = "LANCER_DAO";
\ No newline at end of file
diff --git a/programs/mono-program/src/errors.rs b/programs/mono-program/src/errors.rs
index 8fd89d8..e758d43 100644
--- a/programs/mono-program/src/errors.rs
+++ b/programs/mono-program/src/errors.rs
@@ -12,7 +12,10 @@ pub enum MonoError
     #[msg("Max Number of Approved Submitters already reached")]
     MaxApprovedSubmitters,
 
-    #[msg("Max Number of Approved Submitters already reached")]
+    #[msg("Submitter Key Already Present in ApprovedSubmitters List")]
+    SubmitterAlreadyPresent,
+
+    #[msg("Min Number of Approved Submitters already reached")]
     MinApprovedSubmitters,
 
     #[msg("There is an active request already present")]
diff --git a/programs/mono-program/src/instructions/add_approved_submitters.rs b/programs/mono-program/src/instructions/add_approved_submitters.rs
index 2084503..031a6b3 100644
--- a/programs/mono-program/src/instructions/add_approved_submitters.rs
+++ b/programs/mono-program/src/instructions/add_approved_submitters.rs
@@ -29,10 +29,21 @@ pub fn handler(ctx: Context<AddApprovedSubmitters>, ) -> Result<()>
 {
     let feature_data_account = &mut ctx.accounts.feature_data_account;
 
+    // prevent repetition
+    for submitter in feature_data_account.approved_submitters.iter()
+    {
+        require_keys_neq!(
+            *submitter, 
+            ctx.accounts.submitter.key(),
+            MonoError::SubmitterAlreadyPresent
+        );
+    }
+
     let submitter_index: usize = feature_data_account.no_of_submitters as usize;
     require!(submitter_index < MAX_NO_OF_SUBMITTERS, MonoError::MaxApprovedSubmitters);
     feature_data_account.approved_submitters[submitter_index] = ctx.accounts.submitter.key();
     feature_data_account.no_of_submitters += 1;
 
+
     Ok(())
 }
\ No newline at end of file
diff --git a/programs/mono-program/src/instructions/approve_request.rs b/programs/mono-program/src/instructions/approve_request.rs
index 180decb..192b5b3 100644
--- a/programs/mono-program/src/instructions/approve_request.rs
+++ b/programs/mono-program/src/instructions/approve_request.rs
@@ -3,9 +3,9 @@
 use std::ops::{Mul, Div};
 
 use anchor_lang::prelude::*;
-use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount, MintTo, Mint}};
+use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount}};
 
-use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, COMPLETER_FEE, LANCER_ADMIN, MINT_DECIMALS, LANCER_COMPLETER_TOKENS, LANCER_COMPANY_TOKENS, MINT_AUTHORITY, LANCER_FEE}, state::FeatureDataAccount, errors::MonoError};
+use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, LANCER_ADMIN, LANCER_FEE}, state::FeatureDataAccount, errors::MonoError};
 
 #[derive(Accounts)]
 pub struct ApproveRequest<'info>
@@ -23,21 +23,6 @@ pub struct ApproveRequest<'info>
     )]
     pub payout_account: Box<Account<'info, TokenAccount>>,
 
-    // #[account(
-    //     mut,
-    //     token::mint = lancer_completer_tokens,
-    //     token::authority = submitter,
-    // )]
-    // pub payout_completer_tokens_account: Box<Account<'info, TokenAccount>>,
-
-    // #[account(
-    //     mut,
-    //     token::mint = lancer_company_tokens,
-    //     // token::authority = feature_data_account.creator,
-    // )]
-    // pub creator_company_tokens_account: Box<Account<'info, TokenAccount>>,
-
-
     #[account(
         mut, 
         close = creator,
@@ -136,7 +121,7 @@ impl<'info> ApproveRequest<'info> {
 
 }
 
-pub fn handler(ctx: Context<ApproveRequest>, mint_bump: u8) -> Result<()>
+pub fn handler(ctx: Context<ApproveRequest>, ) -> Result<()>
 {
     let feature_data_account = &ctx.accounts.feature_data_account;
     //TODO - test for this
diff --git a/programs/mono-program/src/instructions/approve_request_multiple.rs b/programs/mono-program/src/instructions/approve_request_multiple.rs
index 78dccbf..dc6bde7 100644
--- a/programs/mono-program/src/instructions/approve_request_multiple.rs
+++ b/programs/mono-program/src/instructions/approve_request_multiple.rs
@@ -5,7 +5,7 @@ use std::{ops::{Add, Mul, Div}};
 use anchor_lang::prelude::*;
 use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount, spl_token}};
 
-use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, COMPLETER_FEE, LANCER_ADMIN, LANCER_FEE, }, state::FeatureDataAccount, errors::MonoError};
+use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, LANCER_ADMIN, LANCER_FEE, }, state::FeatureDataAccount, errors::MonoError};
 
 #[derive(Accounts)]
 pub struct ApproveRequestMultiple<'info>
@@ -13,21 +13,6 @@ pub struct ApproveRequestMultiple<'info>
     #[account(mut)]
     pub creator: Signer<'info>,
 
-    // #[account(
-    //     mut,
-    //     token::mint = feature_data_account.funds_mint,
-    //     // token::authority = submitter,
-    // )]
-    // pub submitter1_account: Box<Account<'info, TokenAccount>>,
-
-    // #[account(
-    //     mut,
-    //     token::mint = lancer_company_tokens,
-    //     // token::authority = feature_data_account.creator,
-    // )]
-    // pub creator_company_tokens_account: Box<Account<'info, TokenAccount>>,
-
-
     #[account(
         mut, 
         close = creator,
@@ -88,42 +73,8 @@ pub struct ApproveRequestMultiple<'info>
     )]
     pub program_authority: UncheckedAccount<'info>,
 
-    // #[account(
-    //     mut,
-    //     seeds = [
-    //         LANCER_ADMIN.as_ref(),
-    //         LANCER_COMPLETER_TOKENS.as_bytes()
-    //     ],
-    //     bump,
-    //     mint::decimals = MINT_DECIMALS,
-    //     mint::authority = program_mint_authority,
-    // )]
-    // pub lancer_completer_tokens: Account<'info, Mint>,
-
-    // #[account(
-    //     mut,
-    //     seeds = [
-    //         LANCER_ADMIN.as_ref(),
-    //         LANCER_COMPANY_TOKENS.as_bytes()
-    //     ],
-    //     bump,
-    //     mint::decimals = MINT_DECIMALS,
-    //     mint::authority = program_mint_authority,
-    // )]
-    // pub lancer_company_tokens: Account<'info, Mint>,
-
-    ///CHECK: mint authority
-    // #[account(
-    //     seeds = [
-    //         MINT_AUTHORITY.as_bytes()
-    //     ],
-    //     bump,
-    // )]
-    // pub program_mint_authority: UncheckedAccount<'info>,
-
-
     pub token_program: Program<'info, Token>,
-pub system_program: Program<'info, System>,
+    pub system_program: Program<'info, System>,
 }
 
 impl<'info> ApproveRequestMultiple<'info> {
@@ -190,9 +141,7 @@ pub fn handler<'info>(ctx: Context<'_, '_, '_, 'info, ApproveRequestMultiple<'in
     if feature_data_account.creator.key() != LANCER_ADMIN
     {
         let lancer_fee = (bounty_amount as f64)
-        // .mul(current_share as f64)
         .mul(LANCER_FEE as f64)
-        // .div(PERCENT as f64)
         .div(PERCENT as f64) as u64;
 
         token::transfer(
@@ -246,8 +195,6 @@ pub fn handler<'info>(ctx: Context<'_, '_, '_, 'info, ApproveRequestMultiple<'in
         ctx.accounts.feature_token_account.reload()?;
     }
 
-    // let lancer_fee = 
-
     // Close token account owned by program that stored funds
     token::close_account(
             ctx.accounts.close_context().with_signer(&transfer_signer)
diff --git a/programs/mono-program/src/instructions/approve_request_multiple_third_party.rs b/programs/mono-program/src/instructions/approve_request_multiple_third_party.rs
index c652367..a4d7e25 100644
--- a/programs/mono-program/src/instructions/approve_request_multiple_third_party.rs
+++ b/programs/mono-program/src/instructions/approve_request_multiple_third_party.rs
@@ -5,7 +5,7 @@ use std::{ops::{Add, Mul, Div, Sub}};
 use anchor_lang::prelude::*;
 use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount, spl_token}};
 
-use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, COMPLETER_FEE, LANCER_ADMIN, LANCER_FEE, THIRD_PARTY_FEE, }, state::FeatureDataAccount, errors::MonoError};
+use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, LANCER_ADMIN, LANCER_FEE, THIRD_PARTY_FEE, }, state::FeatureDataAccount, errors::MonoError};
 
 #[derive(Accounts)]
 pub struct ApproveRequestMultipleThirdParty<'info>
diff --git a/programs/mono-program/src/instructions/approve_request_third_party.rs b/programs/mono-program/src/instructions/approve_request_third_party.rs
index 89bab3f..f051d7b 100644
--- a/programs/mono-program/src/instructions/approve_request_third_party.rs
+++ b/programs/mono-program/src/instructions/approve_request_third_party.rs
@@ -3,9 +3,9 @@
 use std::ops::{Mul, Div, Sub};
 
 use anchor_lang::prelude::*;
-use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount, MintTo, Mint}};
+use anchor_spl::{token::{TokenAccount, Token, self, Transfer, CloseAccount}};
 
-use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, COMPLETER_FEE, LANCER_ADMIN, MINT_DECIMALS, LANCER_COMPLETER_TOKENS, LANCER_COMPANY_TOKENS, MINT_AUTHORITY, THIRD_PARTY_FEE, LANCER_FEE}, state::FeatureDataAccount, errors::MonoError};
+use crate::{constants::{MONO_DATA, PERCENT, LANCER_DAO, LANCER_ADMIN, THIRD_PARTY_FEE, LANCER_FEE}, state::FeatureDataAccount, errors::MonoError};
 
 #[derive(Accounts)]
 pub struct ApproveRequestThirdParty<'info>
@@ -134,7 +134,7 @@ impl<'info> ApproveRequestThirdParty<'info> {
 
 }
 
-pub fn handler(ctx: Context<ApproveRequestThirdParty>, bump: u8) -> Result<()>
+pub fn handler(ctx: Context<ApproveRequestThirdParty>, ) -> Result<()>
 {
 
     let transfer_seeds = &[
diff --git a/programs/mono-program/src/instructions/fund_feature.rs b/programs/mono-program/src/instructions/fund_feature.rs
index f6f7bd4..641e069 100644
--- a/programs/mono-program/src/instructions/fund_feature.rs
+++ b/programs/mono-program/src/instructions/fund_feature.rs
@@ -63,24 +63,28 @@ pub struct FundFeature<'info>
 
 pub fn handler(ctx: Context<FundFeature>, amount: u64) -> Result<()>
 {
+    let feature_data_account = &mut ctx.accounts.feature_data_account;
+
+    feature_data_account.amount = feature_data_account.amount
+        .checked_add(amount)
+        .unwrap();
+
     // check that account can pay amount + 5%
-    let lancer_fee = amount
+    let lancer_fee = (amount)
         .checked_mul(FEE as u64)
         .unwrap()
         .checked_div(PERCENT)
         .unwrap();
     let min_token_balance;
     
-    if ctx.accounts.feature_data_account.creator == LANCER_ADMIN {
+    if feature_data_account.creator == LANCER_ADMIN {
         min_token_balance = amount
     } else{
         min_token_balance = amount
-        .checked_add(lancer_fee)
-        .unwrap();
+            .checked_add(lancer_fee)
+            .unwrap();
     }
 
-    let feature_data_account = &mut ctx.accounts.feature_data_account;
-    feature_data_account.amount = amount;
     require!(
         ctx.accounts.creator_token_account.amount >= 
         min_token_balance,
diff --git a/programs/mono-program/src/lib.rs b/programs/mono-program/src/lib.rs
index 9ab89d9..040275c 100644
--- a/programs/mono-program/src/lib.rs
+++ b/programs/mono-program/src/lib.rs
@@ -38,9 +38,9 @@ pub mod mono_program {
         submit_request::handler(ctx)
     }
 
-    pub fn approve_request(ctx: Context<ApproveRequest>, mint_bump: u8) -> Result<()>
+    pub fn approve_request(ctx: Context<ApproveRequest>, ) -> Result<()>
     {
-        approve_request::handler(ctx, mint_bump)
+        approve_request::handler(ctx,)
     }
 
     pub fn deny_request(ctx: Context<DenyRequest>) -> Result<()>
@@ -68,19 +68,14 @@ pub mod mono_program {
         create_lancer_token_account::handler(ctx)
     }
 
-    // pub fn create_lancer_tokens(ctx: Context<CreateLancerTokens>) -> Result<()>
-    // {
-    //     create_lancer_tokens::handler(ctx)
-    // }
-
     pub fn withdraw_tokens(ctx: Context<WithdrawTokens>, amount: u64, withdraw_bump: u8) -> Result<()> 
     {
         withdraw_tokens::handler(ctx, amount, withdraw_bump)
     }
 
-    pub fn approve_request_third_party(ctx: Context<ApproveRequestThirdParty>, bump: u8) -> Result<()> 
+    pub fn approve_request_third_party(ctx: Context<ApproveRequestThirdParty>, ) -> Result<()> 
     {
-        approve_request_third_party::handler(ctx, bump)
+        approve_request_third_party::handler(ctx, )
     }
 
     pub fn enable_multiple_submitters(ctx: Context<EnableMultipleSubmitters>, ) -> Result<()> 
diff --git a/sdk/idl/mono_program.json b/sdk/idl/mono_program.json
index 8a0c647..1950982 100644
--- a/sdk/idl/mono_program.json
+++ b/sdk/idl/mono_program.json
@@ -437,12 +437,7 @@
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "mintBump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "denyRequest",
@@ -945,12 +940,7 @@
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "bump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "enableMultipleSubmitters",
@@ -1446,61 +1436,66 @@
     },
     {
       "code": 6003,
-      "name": "MinApprovedSubmitters",
-      "msg": "Max Number of Approved Submitters already reached"
+      "name": "SubmitterAlreadyPresent",
+      "msg": "Submitter Key Already Present in ApprovedSubmitters List"
     },
     {
       "code": 6004,
+      "name": "MinApprovedSubmitters",
+      "msg": "Min Number of Approved Submitters already reached"
+    },
+    {
+      "code": 6005,
       "name": "PendingRequestAlreadySubmitted",
       "msg": "There is an active request already present"
     },
     {
-      "code": 6005,
+      "code": 6006,
       "name": "NoActiveRequest",
       "msg": "No Request Submitted yet"
     },
     {
-      "code": 6006,
+      "code": 6007,
       "name": "CannotPayFee",
       "msg": "Insufficient funds to pay lancer fee"
     },
     {
-      "code": 6007,
+      "code": 6008,
       "name": "CannotCancelFeature",
       "msg": "Cannot Cancel Feature"
     },
     {
-      "code": 6008,
+      "code": 6009,
       "name": "InvalidAdmin",
       "msg": "You are not the Admin"
     },
     {
-      "code": 6009,
+      "code": 6010,
       "name": "NotApprovedSubmitter",
       "msg": "You do not have permissions to submit"
     },
     {
-      "code": 6010,
+      "code": 6011,
       "name": "ExpectedSingleSubmitter",
       "msg": "This Instruction is used for only a single submitter."
     },
     {
-      "code": 6011,
+      "code": 6012,
       "name": "ExpectedMultipleSubmitters",
       "msg": "This Instruction is used for only Multiple submitters."
     },
     {
-      "code": 6012,
+      "code": 6013,
       "name": "MaxShareExceeded",
       "msg": "Share Cannot Exceed 100"
     },
     {
-      "code": 6013,
+      "code": 6014,
       "name": "ShareMustBe100",
       "msg": "Share must be 100"
     },
     {
-      "code": 6014,
+      "code": 6015,
       "name": "NotOwnedBySplToken",
       "msg": "Token Error"
     }
diff --git a/sdk/instructions.ts b/sdk/instructions.ts
index 9358a04..3db87d3 100644
--- a/sdk/instructions.ts
+++ b/sdk/instructions.ts
@@ -225,23 +225,14 @@ export const approveRequestInstruction = async (
 
   const [lancer_token_program_authority] = await findLancerProgramAuthority(program);
 
-  // const [lancer_completer_tokens] = await findLancerCompleterTokens(program);
-  // const [lancer_company_tokens] = await findLancerCompanyTokens(program);
-  // const [program_mint_authority, mint_bump] = await findProgramMintAuthority(program);
-
-  return await program.methods.approveRequest((1))// TODO remove this
+  return await program.methods.approveRequest()// TODO remove this
   .accounts({
     creator: creator,
     submitter: submitter,
-    // lancerCompleterTokens: lancer_completer_tokens,
-    // lancerCompanyTokens: lancer_company_tokens,
     payoutAccount: submitter_token_account,
     featureDataAccount: feature_data_account,
-    // creatorCompanyTokensAccount: creator_company_tokens_account,
-    // payoutCompleterTokensAccount: payout_completer_tokens_account,
     featureTokenAccount: feature_token_account,
     programAuthority: program_authority,
-    // programMintAuthority: program_mint_authority,
     lancerDaoTokenAccount: lancer_dao_token_account,
     lancerTokenProgramAuthority: lancer_token_program_authority,
     tokenProgram: TOKEN_PROGRAM_ID,
@@ -288,22 +279,16 @@ export const approveRequestThirdPartyInstruction = async (
   // const [lancer_company_tokens] = await findLancerCompanyTokens(program);
   // const [program_mint_authority, mint_bump] = await findProgramMintAuthority(program);
 
-  return await program.methods.approveRequestThirdParty((1))
+  return await program.methods.approveRequestThirdParty()
   .accounts({
     creator: creator,
     submitter: submitter,
-    // lancerCompleterTokens: lancer_completer_tokens,
-    // lancerCompanyTokens: lancer_company_tokens,
     payoutAccount: submitter_token_account,
     featureDataAccount: feature_data_account,
-    // creatorCompanyTokensAccount: creator_company_tokens_account,
-    // payoutCompleterTokensAccount: payout_completer_tokens_account,
     featureTokenAccount: feature_token_account,
     programAuthority: program_authority,
-    // programMintAuthority: program_mint_authority,
     thirdParty: third_party_token_account,
     lancerDaoTokenAccount: lancer_dao_token_account,
-    // lancerTokenProgramAuthority: lancer_token_program_authority,
     tokenProgram: TOKEN_PROGRAM_ID,
   }).instruction();
 }
@@ -390,25 +375,6 @@ const [program_authority] = await findProgramAuthority(
   }).instruction();
 }
 
-export const createLancerTokensInstruction = async (
-  program: Program<MonoProgram>,
-): Promise<TransactionInstruction> =>  {
-
-  const [lancer_completer_tokens] = await findLancerCompleterTokens(program);
-  const [lancer_company_tokens] = await findLancerCompanyTokens(program);
-  const [program_mint_authority] = await findProgramMintAuthority(program);
-
-  return  await program.methods.createLancerTokens()
-    .accounts({
-      admin: new PublicKey(LANCER_ADMIN),
-      lancerCompleterTokens: lancer_completer_tokens,
-      lancerCompanyTokens: lancer_company_tokens,
-      programMintAuthority: program_mint_authority,
-      systemProgram: SystemProgram.programId,
-      tokenProgram: TOKEN_PROGRAM_ID,
-    }).instruction()
-}
-
 export const withdrawTokensInstruction = async (
   amount: number,
   mint: PublicKey,
@@ -544,7 +510,6 @@ export const approveRequestMultipleTransaction = async (
   if (fetch_submitters.approvedSubmitters[0].toString() != submitter1.toString())
   {
     submitter1 = await getAssociatedTokenAddress(mint, fetch_submitters.approvedSubmitters[0])
-    console.log("submitter 1 token accoun", submitter1.toString())
   }
   if (fetch_submitters.approvedSubmitters[1].toString() != submitter2.toString())
   {
diff --git a/sdk/types/mono_program.ts b/sdk/types/mono_program.ts
index f052d65..ee38ea1 100644
--- a/sdk/types/mono_program.ts
+++ b/sdk/types/mono_program.ts
@@ -437,12 +437,7 @@ export type MonoProgram = {
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "mintBump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "denyRequest",
@@ -945,12 +940,7 @@ export type MonoProgram = {
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "bump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "enableMultipleSubmitters",
@@ -1446,61 +1436,66 @@ export type MonoProgram = {
     },
     {
       "code": 6003,
-      "name": "MinApprovedSubmitters",
-      "msg": "Max Number of Approved Submitters already reached"
+      "name": "SubmitterAlreadyPresent",
+      "msg": "Submitter Key Already Present in ApprovedSubmitters List"
     },
     {
       "code": 6004,
+      "name": "MinApprovedSubmitters",
+      "msg": "Min Number of Approved Submitters already reached"
+    },
+    {
+      "code": 6005,
       "name": "PendingRequestAlreadySubmitted",
       "msg": "There is an active request already present"
     },
     {
-      "code": 6005,
+      "code": 6006,
       "name": "NoActiveRequest",
       "msg": "No Request Submitted yet"
     },
     {
-      "code": 6006,
+      "code": 6007,
       "name": "CannotPayFee",
       "msg": "Insufficient funds to pay lancer fee"
     },
     {
-      "code": 6007,
+      "code": 6008,
       "name": "CannotCancelFeature",
       "msg": "Cannot Cancel Feature"
     },
     {
-      "code": 6008,
+      "code": 6009,
       "name": "InvalidAdmin",
       "msg": "You are not the Admin"
     },
     {
-      "code": 6009,
+      "code": 6010,
       "name": "NotApprovedSubmitter",
       "msg": "You do not have permissions to submit"
     },
     {
-      "code": 6010,
+      "code": 6011,
       "name": "ExpectedSingleSubmitter",
       "msg": "This Instruction is used for only a single submitter."
     },
     {
-      "code": 6011,
+      "code": 6012,
       "name": "ExpectedMultipleSubmitters",
       "msg": "This Instruction is used for only Multiple submitters."
     },
     {
-      "code": 6012,
+      "code": 6013,
       "name": "MaxShareExceeded",
       "msg": "Share Cannot Exceed 100"
     },
     {
-      "code": 6013,
+      "code": 6014,
       "name": "ShareMustBe100",
       "msg": "Share must be 100"
     },
     {
-      "code": 6014,
+      "code": 6015,
       "name": "NotOwnedBySplToken",
       "msg": "Token Error"
     }
@@ -1946,12 +1941,7 @@ export const IDL: MonoProgram = {
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "mintBump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "denyRequest",
@@ -2454,12 +2444,7 @@ export const IDL: MonoProgram = {
           "isSigner": false
         }
       ],
-      "args": [
-        {
-          "name": "bump",
-          "type": "u8"
-        }
-      ]
+      "args": []
     },
     {
       "name": "enableMultipleSubmitters",
@@ -2955,61 +2940,66 @@ export const IDL: MonoProgram = {
     },
     {
       "code": 6003,
-      "name": "MinApprovedSubmitters",
-      "msg": "Max Number of Approved Submitters already reached"
+      "name": "SubmitterAlreadyPresent",
+      "msg": "Submitter Key Already Present in ApprovedSubmitters List"
     },
     {
       "code": 6004,
+      "name": "MinApprovedSubmitters",
+      "msg": "Min Number of Approved Submitters already reached"
+    },
+    {
+      "code": 6005,
       "name": "PendingRequestAlreadySubmitted",
       "msg": "There is an active request already present"
     },
     {
-      "code": 6005,
+      "code": 6006,
       "name": "NoActiveRequest",
       "msg": "No Request Submitted yet"
     },
     {
-      "code": 6006,
+      "code": 6007,
       "name": "CannotPayFee",
       "msg": "Insufficient funds to pay lancer fee"
     },
     {
-      "code": 6007,
+      "code": 6008,
       "name": "CannotCancelFeature",
       "msg": "Cannot Cancel Feature"
     },
     {
-      "code": 6008,
+      "code": 6009,
       "name": "InvalidAdmin",
       "msg": "You are not the Admin"
     },
     {
-      "code": 6009,
+      "code": 6010,
       "name": "NotApprovedSubmitter",
       "msg": "You do not have permissions to submit"
     },
     {
-      "code": 6010,
+      "code": 6011,
       "name": "ExpectedSingleSubmitter",
       "msg": "This Instruction is used for only a single submitter."
     },
     {
-      "code": 6011,
+      "code": 6012,
       "name": "ExpectedMultipleSubmitters",
       "msg": "This Instruction is used for only Multiple submitters."
     },
     {
-      "code": 6012,
+      "code": 6013,
       "name": "MaxShareExceeded",
       "msg": "Share Cannot Exceed 100"
     },
     {
-      "code": 6013,
+      "code": 6014,
       "name": "ShareMustBe100",
       "msg": "Share must be 100"
     },
     {
-      "code": 6014,
+      "code": 6015,
       "name": "NotOwnedBySplToken",
       "msg": "Token Error"
     }
diff --git a/test_cases.yaml b/test_cases.yaml
new file mode 100644
index 0000000..ced439c
--- /dev/null
+++ b/test_cases.yaml
@@ -0,0 +1,385 @@
+//test_cases.yaml
+approve Request tests:
+  test createLancerTokenAccount works:
+    instruction:
+      createLancerTokenAccount:
+        admin != creator: fail
+        admin = creator: pass
+
+  test approveRequest:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      approveRequest:
+        No Request Submitted yet: fail
+      submitRequest: pass
+      approveRequest: pass
+
+  test creator = submitter works perfectly when calling approveRequest:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      addApprovedSubmitters:
+        creator = submitter: pass
+      approveRequest:
+        No Request Submitted yet: fail
+      submitRequest: pass
+      approveRequest: pass
+
+  test third party fees:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      addApproveSubmitter: pass
+      submitRequest: pass
+      approveRequestThirdParty: pass
+
+  approve ReQuest for Multiple Submitters:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      addApprovedSubmitters(4): pass
+      addApprovedSubmitters(5): pass
+      submitRequestMultiple:
+        "This Instruction is used for only Multiple submitters.": fail
+      enableMultipleSubmitters: pass
+      submitRequestMultiple(1): pass
+      submitRequestMultiple(2): pass
+      submitRequestMultiple(3): pass
+      submitRequestMultiple(4): pass
+      submitRequestMultiple(5): pass
+      approveRequestMultiple:
+        "Share must be 100": fail
+      setShareMultipleSubmitters(1):
+        share = 50: pass
+      setShareMultipleSubmitters(2):
+        share = 25: pass
+      setShareMultipleSubmitters(3):
+        share = 15: pass
+      setShareMultipleSubmitters(4):
+        share = 5: pass
+      setShareMultipleSubmitters(5):
+        share = 5: pass
+      approveRequestMultiple: pass
+  
+  test no lancer fees when admin creates bounty and calls approveRequest(Multiple Submitters):
+    instruction:
+      createFeatureFundingAccount:
+        admin = creator: pass
+      fundFeature: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      addApprovedSubmitters(4): pass
+      addApprovedSubmitters(5): pass
+      submitRequestMultiple:
+        "This Instruction is used for only Multiple submitters.": fail
+      enableMultipleSubmitters: pass
+      submitRequestMultiple(1): pass
+      submitRequestMultiple(2): pass
+      submitRequestMultiple(3): pass
+      submitRequestMultiple(4): pass
+      submitRequestMultiple(5): pass
+      approveRequestMultiple:
+        "Share must be 100": fail
+      setShareMultipleSubmitters(1):
+        share = 50: pass
+      setShareMultipleSubmitters(2):
+        share = 25: pass
+      setShareMultipleSubmitters(3):
+        share = 15: pass
+      setShareMultipleSubmitters(4):
+        share = 5: pass
+      setShareMultipleSubmitters(5):
+        share = 5: pass
+      approveRequestMultiple: pass
+
+  test third party does not collect fees when admin creates bounty and calls approveRequestThirdParty:
+    instruction:
+      createFeatureFundingAccount:
+        admin = creator: pass
+      fundFeature: pass
+      addApprovedSubmitters: pass
+      submitRequestInstruction: pass
+      approveRequestThirdParty: pass
+
+  test no lancer fees when admin creates bounty and calls approveRequest(Single Submitter):
+    instruction:
+      createFeatureFundingAccount:
+        admin = creator: pass
+      fundFeature: pass
+      addApprovedSubmitters: pass
+      approveRequest:
+        "No Request Submitted yet": fail
+      submitRequest: pass
+      approveRequest: pass
+
+  test no third party/lancer fees when admin creates bounty and calls approveReQuest(Multiple Submitters):
+    instruction:
+      createFeatureFundingAccount:
+        admin = creator: pass
+      fundFeature: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      addApprovedSubmitters(4): pass
+      addApprovedSubmitters(5): pass
+      submitRequestMultiple:
+        "This Instruction is used for only Multiple submitters.": fail
+      enableMultipleSubmitters: pass
+      submitRequestMultiple(1): pass
+      submitRequestMultiple(2): pass
+      submitRequestMultiple(3): pass
+      submitRequestMultiple(4): pass
+      submitRequestMultiple(5): pass
+      approveRequestMultiple:
+        "Share must be 100": fail
+      setShareMultipleSubmitters(1):
+        share = 50: pass
+      setShareMultipleSubmitters(2):
+        share = 25: pass
+      setShareMultipleSubmitters(3):
+        share = 15: pass
+      setShareMultipleSubmitters(4):
+        share = 5: pass
+      setShareMultipleSubmitters(5):
+        share = 5: pass
+      approveRequestMultiple: pass
+
+approve submitter tests:
+  test approveSubmitter:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      addApprovedSubmitters(4): pass
+      addApprovedSubmitters(5): pass
+      addApprovedSubmitters(6):
+        "Max Number of Approved Submitters already reached": fail
+
+  removed approved submitters:
+    instruction:
+      createFeatureFundingAccount: pass
+      removeApprovedSubmitters:
+        "Min Number of Approved Submitters already reached": fail
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      removeApprovedSubmitters:
+        submitter1: pass
+      addApprovedSubmitters(1): pass
+      removeApprovedSubmitters:
+        submitter3: pass
+      addApprovedSubmitters(3): pass
+      removeApprovedSubmitters:
+        submitter3: pass
+
+  prevent adding the same submitter Pubkey in the list twice:
+    createFeatureFundingAccount: pass
+    addApprovedSubmitters(1): pass
+    addApprovedSubmitters(2): pass
+    addApprovedSubmitters(1):
+      Submitter Key Already Present in ApprovedSubmitters List: fail
+    
+cancel feature tests:
+  test voteToCancel:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters: pass
+      submitRequest: pass
+      voteToCancel:
+        creator = true: pass
+      voteToCancel:
+        submitter = true: pass
+      
+  test cancelFeature:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters: pass
+      submitRequest: pass
+      fundFeature: pass
+      cancelFeature:
+        funder_cancel = false & payout_cancel = false:
+          "Cannot Cancel Feature": fail 
+      denyRequest: pass
+      cancelFeature:
+        funder_cancel = false & request_submitted = true:
+          "Cannot Cancel Feature": fail
+      voteToCancel:
+        creator = true: pass
+      voteToCancel:
+        submitter = false: pass
+      voteToCancel:
+        creator = false: pass
+      cancelFeature:
+        funder_cancel = false & payout_cancel = false:
+          "Cannot Cancel Feature": fail
+      voteToCancel:
+        creator = true: pass
+      voteToCancel:
+        submitter = true: pass
+      cancelFeature: pass
+      
+  cancel vote if creator = submitter:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters:
+        submitter = creator: pass
+      submitRequest: pass
+      voteToCancel: pass
+
+deny Request tests:
+  test denyRequest:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      addApprovedSubmitters: pass
+      denyRequest:
+        "No Request Submitted yet": fail
+      submitRequest: pass
+      denyRequest: pass
+
+fund feature tests:
+  test fundFeature Works:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature:
+        (token account amount < amount + lancer fee):
+          "Insufficient funds to pay lancer fee": fail
+      fundFeature:
+        (token account amount >= amount + lancer fee): pass
+
+  if admin = creator, creator does not pay extra 5% upfront:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature:
+        (token account amount < amount):
+          "Insufficient funds to pay lancer fee": fail
+      fundFeature:
+        (token account amount >= amount): pass
+
+  test amount gets added on if fundFeature is called twice:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature:
+        (token account amount < amount + lancer fee):
+          "Insufficient funds to pay lancer fee": fail
+      fundFeature:
+        (token account amount >= amount + lancer fee): pass
+      fundFeature:
+        (token account amount >= amount + lancer fee): pass
+
+  (admin = creator)test amount gets added but still no lancer fee if fundFeature is called twice:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature:
+        (token account amount < amount):
+          "Insufficient funds to pay lancer fee": fail
+      fundFeature:
+        (token account amount >= amount): pass
+      fundFeature:
+        (token account amount >= amount): pass
+
+integration tests:
+  test createFFAInstruction works:
+    instruction:
+      createFeatureFundingAccount: pass
+  
+  test toggle on enable multiple submitters:
+    instruction:
+      createFeatureFundingAccount: pass
+      enableMultipleSubmitters: pass
+
+  set shares of multiple submitters:
+    instruction:
+      createFeatureFundingAccount: pass
+      enableMultipleSubmitters: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      addApprovedSubmitters(3): pass
+      addApprovedSubmitters(4): pass
+      addApprovedSubmitters(5): pass
+      addApprovedSubmitters(6):
+        "Max Number of Approved Submitters already reached": fail
+      setShareMultipleSubmitters:
+        submitter1_share = 101:
+          "Share Cannot Exceed 100": fail
+      setShareMultipleSubmitters:
+        creator = unauthorized:
+          "A seeds constraint was violated": fail
+      setShareMultipleSubmitters(1):
+        share = 20: pass
+      setShareMultipleSubmitters(2):
+        share = 20: pass
+      setShareMultipleSubmitters(3):
+        share = 20: pass
+      setShareMultipleSubmitters(4):
+        share = 20: pass
+      setShareMultipleSubmitters(5):
+        share = 20: pass
+      setShareMultipleSubmitters(6):
+        submitter = unauthorized:
+          "You do not have permissions to submit": fail
+
+  withdraw tokens after depositing:
+    instruction:
+      createFeatureFundingAccount: pass
+      fundFeature: pass
+      addApprovedSubmitters: pass
+      submitRequest: pass
+      approveRequest: pass
+      withdrawTokens:
+        admin = unauthorized:
+          "You are not the Admin": fail
+      withdrawTokens: pass
+
+submit Request tests:
+  test submitRequest:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters: pass
+      submitRequest: pass
+      submitRequest:
+        "There is an active request already present": fail
+      
+  test submitRequest fails when enable multiple submitters is turmed on:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters: pass
+      enableMultipleSubmitters: pass
+      submitRequest:
+        "This Instruction is used for only a single submitter.": fail
+
+  unapproved submitter cannot submit request:
+    instruction:
+      createFeatureFundingAccount: pass
+      submitRequest:
+        "You do not have permissions to submit": fail
+
+  test submit Request Multiple parties:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      submitRequestMultiple:
+        "This Instruction is used for only Multiple submitters.": fail
+      enableMultipleSubmitters: pass
+      submitRequestMultiple(1): pass
+      submitRequestMultiple(2): pass
+
+  test submit Request Multiple can be called by creator:
+    instruction:
+      createFeatureFundingAccount: pass
+      addApprovedSubmitters(1): pass
+      addApprovedSubmitters(2): pass
+      submitRequestMultiple:
+        "This Instruction is used for only Multiple submitters.": fail
+      enableMultipleSubmitters: pass
+      submitRequestMultiple(1): pass
+      submitRequestMultiple(2): pass
+      submitRequestMultiple(creator): pass
+
diff --git a/tests/approve_request.ts b/tests/approve_request.ts
index c9a17b5..c7b3a7c 100644
--- a/tests/approve_request.ts
+++ b/tests/approve_request.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -18,7 +18,7 @@ describe("approve Request tests", () => {
 
   const program = new Program<MonoProgram>(
         MonoProgramJSON as unknown as MonoProgram, 
-        new PublicKey(MONO_DEVNET), 
+        new PublicKey(MONO_DEVNET),
         provider
     );
     const WSOL_AMOUNT = 2 * LAMPORTS_PER_SOL;
@@ -66,7 +66,6 @@ describe("approve Request tests", () => {
           lancer_token_program_authority.toString()
         )
       })
-    
 
     it ("test approveRequest",async () => {
         let creator = await createKeypair(provider);
@@ -80,18 +79,6 @@ describe("approve Request tests", () => {
         );
         await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
     
-        // const [lancer_completer_tokens] = await findLancerCompleterTokens(program);
-        // const [lancer_company_tokens] = await findLancerCompanyTokens(program);
-        // const [program_mint_authority, mint_bump] = await findProgramMintAuthority(program);
-    
-        // const creator_company_tokens_account = await getOrCreateAssociatedTokenAccount(
-        //   provider.connection,
-        //   creator,
-        //   lancer_company_tokens,
-        //   creator.publicKey
-        // )
-    
-    
         const create_FFA_ix = await createFeatureFundingAccountInstruction(
           WSOL_ADDRESS,
           creator.publicKey,
@@ -129,19 +116,13 @@ describe("approve Request tests", () => {
           WSOL_ADDRESS,
           program
         );
-    
+
           tx = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix), [creator]);
           console.log("fundFeature transaction signature", tx);
     
           // add pubkey to list of accepted submitters(AddApprovedSubmitters)
           const submitter1 = await createKeypair(provider);
-          // const payout_completer_tokens_account = await getOrCreateAssociatedTokenAccount(
-          //   provider.connection,
-          //   creator,
-          //   lancer_completer_tokens,
-          //   submitter1.publicKey
-          // )
-      
+
           const submitter1_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
             submitter1,
@@ -182,19 +163,14 @@ describe("approve Request tests", () => {
           );
 
           try{
-            let approveRequestIx = await program.methods.approveRequest((1))// TODO remove this
+            let approveRequestIx = await program.methods.approveRequest()// TODO remove this
             .accounts({
               creator: creator.publicKey,
               submitter: submitter1.publicKey,
-              // lancerCompleterTokens: lancer_completer_tokens,
-              // lancerCompanyTokens: lancer_company_tokens,
               payoutAccount: submitter1_wsol_account.address,
               featureDataAccount: feature_data_account,
               featureTokenAccount: feature_token_account,
-              // creatorCompanyTokensAccount: creator_company_tokens_account.address,
-              // payoutCompleterTokensAccount: payout_completer_tokens_account.address,
               programAuthority: program_authority,
-              // programMintAuthority: program_mint_authority,
               lancerTokenProgramAuthority: lancer_token_program_authority,
               lancerDaoTokenAccount: lancer_dao_token_account,
               tokenProgram: TOKEN_PROGRAM_ID,
@@ -218,10 +194,7 @@ describe("approve Request tests", () => {
           const submitter_token_account_before_balance = await provider.connection.getTokenAccountBalance(submitter1_wsol_account.address)
           const lancer_token_account_before_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
           acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-    
-        //  let creator_company_tokens_account_before_balance =  await provider.connection.getTokenAccountBalance(creator_company_tokens_account.address);
-        //  let payout_completer_tokens_account_before_balance = await provider.connection.getTokenAccountBalance(payout_completer_tokens_account.address);
-    
+
           let approveRequestIx = await approveRequestInstruction(
             acc.unixTimestamp,
             // payout_completer_tokens_account.address,
@@ -251,21 +224,6 @@ describe("approve Request tests", () => {
               ).toString()
             )
     
-    
-            // check that lancer completer and company tokens are minted
-            // let creator_company_tokens_account_after_balance =  await provider.connection.getTokenAccountBalance(creator_company_tokens_account.address);
-            // let payout_completer_tokens_account_after_balance = await provider.connection.getTokenAccountBalance(payout_completer_tokens_account.address);
-       
-            // assert.equal(
-            //   creator_company_tokens_account_after_balance.value.amount,
-            //   parseInt(creator_company_tokens_account_before_balance.value.amount + amount).toString()
-            // )
-            // assert.equal(
-            //   payout_completer_tokens_account_after_balance.value.amount,
-            //   parseInt(payout_completer_tokens_account_before_balance.value.amount + amount).toString()
-            // )
-    
-    
             // Check token account and data account are closed
             let closed_token_account = await provider.connection.getBalance(feature_token_account);
             let closed_data_account = await provider.connection.getBalance(feature_data_account);
@@ -342,9 +300,9 @@ describe("approve Request tests", () => {
             submitter1.publicKey,
             program
           )
-      
+
           tx = await provider.sendAndConfirm(new Transaction().add(addApproveSubmitterIx), [creator]); 
-    
+
           // test approve request fails if there is no submitted request(ApproveRequest)  
           let [feature_data_account] = await findFeatureAccount(
             acc.unixTimestamp,
@@ -367,37 +325,15 @@ describe("approve Request tests", () => {
             WSOL_ADDRESS,
             program
           );
-        //   const [lancer_completer_tokens] = await findLancerCompleterTokens(program);
-        //   const [lancer_company_tokens] = await findLancerCompanyTokens(program);
-        //   const [program_mint_authority, mint_bump] = await findProgramMintAuthority(program);
-    
-        //   const creator_company_tokens_account = await getOrCreateAssociatedTokenAccount(
-        //     provider.connection,
-        //     creator,
-        //     lancer_company_tokens,
-        //     creator.publicKey
-        //   )
-        //   const payout_completer_tokens_account = await getOrCreateAssociatedTokenAccount(
-        //     provider.connection,
-        //     creator,
-        //     lancer_completer_tokens,
-        //     submitter1.publicKey
-        //   )
-
           try{
-            await program.methods.approveRequest((1))
+            await program.methods.approveRequest()
             .accounts({
               creator: creator.publicKey,
               submitter: submitter1.publicKey,
-              // lancerCompleterTokens: lancer_completer_tokens,
-              // lancerCompanyTokens: lancer_company_tokens,
               payoutAccount: submitter1_wsol_account.address,
               featureDataAccount: feature_data_account,
               featureTokenAccount: feature_token_account,
-              // creatorCompanyTokensAccount: creator_company_tokens_account.address,
-              // payoutCompleterTokensAccount: payout_completer_tokens_account.address,
               programAuthority: program_authority,
-              // programMintAuthority: program_mint_authority,
               lancerTokenProgramAuthority: lancer_token_program_authority,
               lancerDaoTokenAccount: lancer_dao_token_account,
               tokenProgram: TOKEN_PROGRAM_ID,
@@ -435,11 +371,7 @@ describe("approve Request tests", () => {
               WSOL_ADDRESS,
               program
             );
-            try {
-                tx = await provider.sendAndConfirm(new Transaction().add(approveRequestIx), [creator])                
-            } catch (err) {
-                console.log("err : ", err);
-            }
+            tx = await provider.sendAndConfirm(new Transaction().add(approveRequestIx), [creator])                
             console.log("approve Request tx = ", tx);
     
             const submitter_token_account_after_balance = await provider.connection.getTokenAccountBalance(submitter1_wsol_account.address)
@@ -457,20 +389,6 @@ describe("approve Request tests", () => {
                 (LANCER_FEE * amount) + parseInt(lancer_token_account_before_balance.value.amount)
               ).toString()
             )
-
-            // // check that lancer completer and company tokens are minted
-            // let creator_company_tokens_account_after_balance =  await provider.connection.getTokenAccountBalance(creator_company_tokens_account.address);
-            // let payout_completer_tokens_account_after_balance = await provider.connection.getTokenAccountBalance(payout_completer_tokens_account.address);
-       
-            // assert.equal(
-            //   creator_company_tokens_account_after_balance.value.amount,
-            //   parseInt(creator_company_tokens_account_before_balance.value.amount + amount).toString()
-            // )
-            // assert.equal(
-            //   payout_completer_tokens_account_after_balance.value.amount,
-            //   parseInt(payout_completer_tokens_account_before_balance.value.amount + amount).toString()
-            // )
-    
     
         //     // Check token account and data account are closed
             let closed_token_account = await provider.connection.getBalance(feature_token_account);
@@ -530,11 +448,11 @@ describe("approve Request tests", () => {
           program
         );
     
-          tx = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix), [creator]);
-          console.log("fundFeature transaction signature", tx);
-    
-          // add pubkey to list of accepted submitters(AddApprovedSubmitters)
-          const submitter1 = await createKeypair(provider);
+        tx = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix), [creator]);
+        console.log("fundFeature transaction signature", tx);
+  
+        // add pubkey to list of accepted submitters(AddApprovedSubmitters)
+        const submitter1 = await createKeypair(provider);
 
           const submitter1_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
@@ -599,17 +517,10 @@ describe("approve Request tests", () => {
           const lancer_token_account_before_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
           const third_party_tokens_account_before_balance = await provider.connection.getTokenAccountBalance(third_party_wsol_account.address);
           acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-    
-      
-    
-        //   let creator_company_tokens_account_before_balance =  await provider.connection.getTokenAccountBalance(creator_company_tokens_account.address);
-        //   let payout_completer_tokens_account_before_balance = await provider.connection.getTokenAccountBalance(payout_completer_tokens_account.address);
 
           let approveRequestThirdPartyIx = await approveRequestThirdPartyInstruction(
             acc.unixTimestamp,
             third_party_wsol_account.address,
-            // payout_completer_tokens_account.address,
-            // creator_company_tokens_account.address,
             creator.publicKey,
             submitter1.publicKey,
             submitter1_wsol_account.address,
@@ -620,9 +531,9 @@ describe("approve Request tests", () => {
           console.log("approve Request Third party tx = ", tx);
     
           const submitter_token_account_after_balance = await provider.connection.getTokenAccountBalance(submitter1_wsol_account.address)
-            const lancer_token_account_after_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
-            const third_party_tokens_account_after_balance = await provider.connection.getTokenAccountBalance(third_party_wsol_account.address);
-    
+          const lancer_token_account_after_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
+          const third_party_tokens_account_after_balance = await provider.connection.getTokenAccountBalance(third_party_wsol_account.address);
+ 
             assert.equal(
               submitter_token_account_after_balance.value.amount, 
               (// submitter gets 95% of bounty amount
@@ -852,7 +763,7 @@ describe("approve Request tests", () => {
             submitter5.publicKey,
             program
           )
-    
+
           await provider.sendAndConfirm(new Transaction().add(submitRequestMultipleIx1).add(submitRequestMultipleIx2), [submitter1, submitter2])
           try {
             await program.methods.approveRequestMultiple()
@@ -922,61 +833,7 @@ describe("approve Request tests", () => {
         ); 
         
         acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-    
-    // try{
-        //   let modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({
-        //     units: 1400000
-        //   });
-        //   const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
-        //     microLamports: 1
-        //   });
-    
-        //   let another_mint = await createMint(
-        //     provider.connection,
-        //     creator,
-        //     creator.publicKey,
-        //     creator.publicKey,
-        //     10
-        //   );
-        //   const submitter1_another_token_account = await getOrCreateAssociatedTokenAccount(
-        //     provider.connection,
-        //     submitter1,
-        //     another_mint,
-        //     submitter1.publicKey
-        //   );
-      
-        //   let approve_request_multiple_ix = await program.methods.approveRequestMultiple()
-        //   .accounts({
-        //     creator: creator.publicKey,
-        //     featureDataAccount: feature_data_account,
-        //     featureTokenAccount: feature_token_account,
-        //     lancerDaoTokenAccount: lancer_dao_token_account,
-        //     lancerTokenProgramAuthority: lancer_token_program_authority,
-        //     programAuthority: program_authority,
-        //     tokenProgram: TOKEN_PROGRAM_ID,
-        //     systemProgram: SystemProgram.programId
-        //   })
-        //   .remainingAccounts([
-        //     { pubkey: submitter1_another_token_account.address, isSigner: false, isWritable: true},
-        //     { pubkey: submitter2_wsol_account.address, isSigner: false, isWritable: true},
-        //     { pubkey: submitter3_wsol_account.address, isSigner: false, isWritable: true},
-        //     { pubkey: submitter4_wsol_account.address, isSigner: false, isWritable: true},
-        //     { pubkey: submitter5_wsol_account.address, isSigner: false, isWritable: true},
-        //   ])
-        //   .signers([creator]).instruction();
-    
-        //   const transaction = new Transaction()
-        //     // .add(modifyComputeUnits)
-        //     // .add(addPriorityFee)
-        //     .add(approve_request_multiple_ix);
-        //   await provider.sendAndConfirm(transaction, [creator])
-    
-        // }catch(err)
-        // {
-        //   console.log("err = ", err);
-        //   assert.equal((err as AnchorError).error.errorMessage, "This mint is not valid")
-        // }
-    
+
         let submitter1_before_token_balance = await provider.connection.getTokenAccountBalance(submitter1_wsol_account.address);
         let submitter2_before_token_balance = await provider.connection.getTokenAccountBalance(submitter2_wsol_account.address);
         let submitter3_before_token_balance = await provider.connection.getTokenAccountBalance(submitter3_wsol_account.address);
@@ -1016,8 +873,6 @@ describe("approve Request tests", () => {
             submitter2_after_token_balance.value.amount
           )
         );
-console.log("before ", submitter3_before_token_balance.value.uiAmount);
-console.log("after ", submitter3_after_token_balance.value.uiAmount);
 
         assert.equal(
           parseInt(
@@ -1106,7 +961,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
     
         const ix = await createFeatureFundingAccountInstruction(
           WSOL_ADDRESS,
-          provider.publicKey,
+          funder,
           program
         );
     
@@ -1205,8 +1060,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
             .add(approveSubmitter5Ix), 
             []
         ); 
-    
-    
+
         try
         { 
           await program.methods.submitRequestMultiple()
@@ -1219,7 +1073,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
         {
           assert.equal((err as AnchorError).error.errorMessage, "This Instruction is used for only Multiple submitters.");
         }
-    
+
         let enable_multiple_submitters_ix = await enableMultipleSubmittersInstruction(
           acc.unixTimestamp,
           funder,
@@ -1524,9 +1378,6 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
           const lancer_token_account_before_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
           const third_party_tokens_account_before_balance = await provider.connection.getTokenAccountBalance(third_party_wsol_account.address);
           acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-    
-      
-    
 
           let approveRequestThirdPartyIx = await approveRequestThirdPartyInstruction(
             acc.unixTimestamp,
@@ -1627,12 +1478,6 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
     
           // add pubkey to list of accepted submitters(AddApprovedSubmitters)
           const submitter1 = await createKeypair(provider);
-          // const payout_completer_tokens_account = await getOrCreateAssociatedTokenAccount(
-          //   provider.connection,
-          //   creator,
-          //   lancer_completer_tokens,
-          //   submitter1.publicKey
-          // )
       
           const submitter1_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
@@ -1674,19 +1519,14 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
           );
 
           try{
-            let approveRequestIx = await program.methods.approveRequest((1))// TODO remove this
+            let approveRequestIx = await program.methods.approveRequest()// TODO remove this
             .accounts({
               creator: funder,
               submitter: submitter1.publicKey,
-              // lancerCompleterTokens: lancer_completer_tokens,
-              // lancerCompanyTokens: lancer_company_tokens,
               payoutAccount: submitter1_wsol_account.address,
               featureDataAccount: feature_data_account,
               featureTokenAccount: feature_token_account,
-              // creatorCompanyTokensAccount: creator_company_tokens_account.address,
-              // payoutCompleterTokensAccount: payout_completer_tokens_account.address,
               programAuthority: program_authority,
-              // programMintAuthority: program_mint_authority,
               lancerTokenProgramAuthority: lancer_token_program_authority,
               lancerDaoTokenAccount: lancer_dao_token_account,
               tokenProgram: TOKEN_PROGRAM_ID,
@@ -1705,7 +1545,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
         )
         acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         tx = await provider.sendAndConfirm(new Transaction().add(submitRequestIx), [submitter1])
-    
+
         // approve request(merge and send funds)(ApproveRequest)
           const submitter_token_account_before_balance = await provider.connection.getTokenAccountBalance(submitter1_wsol_account.address)
           const lancer_token_account_before_balance = await provider.connection.getTokenAccountBalance(lancer_dao_token_account)
@@ -1768,7 +1608,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
             payer,
             WSOL_ADDRESS,
             payer.publicKey
-        );
+          );
 
           const submitter1_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
@@ -1837,8 +1677,7 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
           );
       
             const tx2 = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix), []);
-      
-      
+
           acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
       
           const [feature_token_account] = await findFeatureTokenAccount(
@@ -1958,7 +1797,15 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
               program
             )
       
-            await provider.sendAndConfirm(new Transaction().add(submitRequestMultipleIx1).add(submitRequestMultipleIx2), [submitter1, submitter2])
+            await provider.sendAndConfirm(
+              new Transaction()
+                .add(submitRequestMultipleIx1)
+                .add(submitRequestMultipleIx2)
+                .add(submitRequestMultipleIx3)
+                .add(submitRequestMultipleIx4)
+                .add(submitRequestMultipleIx5), 
+                [submitter1, submitter2, submitter3, submitter4, submitter5]
+            )
             try {
               await program.methods.approveRequestMultiple()
                 .accounts({
@@ -2102,8 +1949,6 @@ console.log("after ", submitter3_after_token_balance.value.uiAmount);
               lancer_after_token_balance.value.amount
             )
           );
-        
-        
 
       })
 })
\ No newline at end of file
diff --git a/tests/approve_submitter.ts b/tests/approve_submitter.ts
index b3f0362..b6df012 100644
--- a/tests/approve_submitter.ts
+++ b/tests/approve_submitter.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -125,17 +125,54 @@ describe("approve submitter tests", () => {
         assert.equal(submitter2.publicKey.toString(), data_account.approvedSubmitters[1].toString());
         assert.equal(submitter3.publicKey.toString(), data_account.approvedSubmitters[2].toString());
 
-        // Adding 4th submitter(should fail)
+        // Adding 4th submitter
         const submitter4 = await createKeypair(provider);
+        approveSubmitterIx = await addApprovedSubmittersInstruction(
+          acc.unixTimestamp,
+          creator.publicKey,
+          submitter4.publicKey,
+          program
+        )
+        
+        tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+        data_account = await program.account.featureDataAccount.fetch(feature_data_account);
+        
+        no_of_submitters += 1;
+        assert.equal(no_of_submitters, data_account.noOfSubmitters);
+        assert.equal(submitter1.publicKey.toString(), data_account.approvedSubmitters[0].toString());
+        assert.equal(submitter2.publicKey.toString(), data_account.approvedSubmitters[1].toString());
+        assert.equal(submitter3.publicKey.toString(), data_account.approvedSubmitters[2].toString());
+        assert.equal(submitter4.publicKey.toString(), data_account.approvedSubmitters[3].toString());
+
+        // Adding 5th submitter
+        const submitter5 = await createKeypair(provider);
+        approveSubmitterIx = await addApprovedSubmittersInstruction(
+          acc.unixTimestamp,
+          creator.publicKey,
+          submitter5.publicKey,
+          program
+        )
+        
+        tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+        data_account = await program.account.featureDataAccount.fetch(feature_data_account);
+        
+        no_of_submitters += 1;
+        assert.equal(no_of_submitters, data_account.noOfSubmitters);
+        assert.equal(submitter1.publicKey.toString(), data_account.approvedSubmitters[0].toString());
+        assert.equal(submitter2.publicKey.toString(), data_account.approvedSubmitters[1].toString());
+        assert.equal(submitter3.publicKey.toString(), data_account.approvedSubmitters[2].toString());
+        assert.equal(submitter4.publicKey.toString(), data_account.approvedSubmitters[3].toString());
+        assert.equal(submitter5.publicKey.toString(), data_account.approvedSubmitters[4].toString());
 
+      // Adding 6th Submitter(Should fail)
       try{
+        const submitter6 = await createKeypair(provider)
         await program.methods.addApprovedSubmitters()
                 .accounts({
                   creator: creator.publicKey,
-                  submitter: submitter4.publicKey,
+                  submitter: submitter6.publicKey,
                   featureDataAccount: feature_data_account
                 }).signers([creator]).rpc();  
-        
       }catch(err){
         assert.equal((err as AnchorError).error.errorMessage, "Max Number of Approved Submitters already reached")
       }
@@ -197,7 +234,7 @@ describe("approve submitter tests", () => {
               featureDataAccount: feature_data_account
             }).signers([creator]).rpc()
         } catch (err) {
-          assert.equal((err as AnchorError).error.errorMessage, "Max Number of Approved Submitters already reached");
+          assert.equal((err as AnchorError).error.errorMessage, "Min Number of Approved Submitters already reached");
         }
         accounts = await provider.connection.getParsedProgramAccounts(
           program.programId, 
@@ -314,7 +351,109 @@ describe("approve submitter tests", () => {
           assert.equal(acc.approvedSubmitters[1].toString(), submitter1.publicKey.toString());
           assert.equal(acc.approvedSubmitters[2].toString(), PublicKey.default.toString());
 
-  })
+    })
+
+    it ("prevent adding the same submitter Pubkey in the list twice", async () => {
+      let creator = await createKeypair(provider);
+      ;
+     const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
+         provider.connection,
+         creator,
+         WSOL_ADDRESS,
+         creator.publicKey
+     );
 
+     await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
+     
+     const ix = await createFeatureFundingAccountInstruction(
+       WSOL_ADDRESS,
+       creator.publicKey,
+       program
+     );
+ 
+     const [program_authority] = await findProgramAuthority(program);
+ 
+     let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
+     const accounts = await provider.connection.getParsedProgramAccounts(
+       program.programId, 
+       {
+         filters: [
+           {
+             dataSize: 381, // number of bytes
+           },
+           {
+             memcmp: {
+               offset: 8, // number of bytes
+               bytes: creator.publicKey.toBase58(), // base58 encoded string
+             },
+           },
+         ],      
+       }
+     );
+
+     const acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+
+     const [feature_data_account] = await findFeatureAccount(
+       acc.unixTimestamp,
+       creator.publicKey,
+       program
+     );
+
+     const submitter1 = await createKeypair(provider);
+     let approveSubmitterIx = await addApprovedSubmittersInstruction(
+       acc.unixTimestamp,
+       creator.publicKey,
+       submitter1.publicKey,
+       program
+     )
+     
+     tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+
+     let data_account = await program.account.featureDataAccount.fetch(feature_data_account);
+     //Testing no of submitters
+     let no_of_submitters = 1;
+     assert.equal(no_of_submitters, data_account.noOfSubmitters);
+     assert.equal(submitter1.publicKey.toString(), data_account.approvedSubmitters[0].toString());
+     assert.equal(PublicKey.default.toString(), data_account.approvedSubmitters[1].toString());
+     assert.equal(PublicKey.default.toString(), data_account.approvedSubmitters[2].toString());
+
+     // Adding 2nd submitter
+     const submitter2 = await createKeypair(provider);
+     approveSubmitterIx = await addApprovedSubmittersInstruction(
+       acc.unixTimestamp,
+       creator.publicKey,
+       submitter2.publicKey,
+       program
+     )
+     
+     tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+     data_account = await program.account.featureDataAccount.fetch(feature_data_account);
+     
+     no_of_submitters += 1;
+     assert.equal(no_of_submitters, data_account.noOfSubmitters);
+     assert.equal(submitter1.publicKey.toString(), data_account.approvedSubmitters[0].toString());
+     assert.equal(submitter2.publicKey.toString(), data_account.approvedSubmitters[1].toString());
+     assert.equal(PublicKey.default.toString(), data_account.approvedSubmitters[2].toString());
+
+    // Adding 3rd submitter that is already present(should fail)
+    try {
+      await program.methods.addApprovedSubmitters()
+        .accounts({
+          creator: creator.publicKey,
+          submitter: submitter1.publicKey,
+          featureDataAccount: feature_data_account,
+        }).signers([creator]).rpc();
+    } catch (err) {
+      assert.equal((err as AnchorError).error.errorMessage, "Submitter Key Already Present in ApprovedSubmitters List")
+    }
+
+    data_account = await program.account.featureDataAccount.fetch(feature_data_account);
+    
+    assert.equal(no_of_submitters, data_account.noOfSubmitters);
+    assert.equal(submitter1.publicKey.toString(), data_account.approvedSubmitters[0].toString());
+    assert.equal(submitter2.publicKey.toString(), data_account.approvedSubmitters[1].toString());
+    assert.equal(PublicKey.default.toString(), data_account.approvedSubmitters[2].toString());
+
+    })
 })
\ No newline at end of file
diff --git a/tests/cancel.ts b/tests/cancel.ts
index 7f3a6c1..356a201 100644
--- a/tests/cancel.ts
+++ b/tests/cancel.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -48,7 +48,7 @@ describe("cancel feature tests", () => {
           creator.publicKey,
           program
         );
-    
+
         const [program_authority] = await findProgramAuthority(program);
     
         let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
@@ -139,226 +139,222 @@ describe("cancel feature tests", () => {
     })
 
     it ("test cancelFeature", async () => {
-            // Add your test here.
-            let creator = await createKeypair(provider);
-            const submitter = await createKeypair(provider);
-            const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
-                provider.connection,
-                creator,
-                WSOL_ADDRESS,
-                creator.publicKey
-            );
-            const submitter_wsol_account = await getOrCreateAssociatedTokenAccount(
+        // Add your test here.
+        let creator = await createKeypair(provider);
+        const submitter = await createKeypair(provider);
+        const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
-            submitter,
+            creator,
             WSOL_ADDRESS,
-            submitter.publicKey
-            );
-            let amount = 1 * LAMPORTS_PER_SOL;
-            await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+            creator.publicKey
+        );
+        const submitter_wsol_account = await getOrCreateAssociatedTokenAccount(
+        provider.connection,
+        submitter,
+        WSOL_ADDRESS,
+        submitter.publicKey
+        );
+        let amount = 1 * LAMPORTS_PER_SOL;
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
-            const ix = await createFeatureFundingAccountInstruction(
-            WSOL_ADDRESS,
-            creator.publicKey,
-            program
-            );
-        
-            const [program_authority] = await findProgramAuthority(program);
-        
-            let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
-            const accounts = await provider.connection.getParsedProgramAccounts(
-            program.programId, 
+        const ix = await createFeatureFundingAccountInstruction(
+        WSOL_ADDRESS,
+        creator.publicKey,
+        program
+        );
+    
+        const [program_authority] = await findProgramAuthority(program);
+    
+        let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
+        const accounts = await provider.connection.getParsedProgramAccounts(
+        program.programId, 
+        {
+            filters: [
             {
-                filters: [
-                {
-                    dataSize: 381, // number of bytes
-                },
-                {
-                    memcmp: {
-                    offset: 8, // number of bytes
-                    bytes: creator.publicKey.toBase58(), // base58 encoded string
-                    },
+                dataSize: 381, // number of bytes
+            },
+            {
+                memcmp: {
+                  offset: 8, // number of bytes
+                  bytes: creator.publicKey.toBase58(), // base58 encoded string
                 },
-                ],      
-            }
-            );
+            },
+            ],      
+        }
+        );
 
-            let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-            
-            const [feature_data_account] = await findFeatureAccount(
-            acc.unixTimestamp,
-            creator.publicKey,
-            program
-            );
+        let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         
-            const [feature_token_account] = await findFeatureTokenAccount(
-            acc.unixTimestamp,
-            creator.publicKey,
-            WSOL_ADDRESS,
-            program
-            );
-            
-            let approveSubmitterIx = await addApprovedSubmittersInstruction(
-            acc.unixTimestamp,
-            creator.publicKey,
+        const [feature_data_account] = await findFeatureAccount(
+        acc.unixTimestamp,
+        creator.publicKey,
+        program
+        );
+    
+        const [feature_token_account] = await findFeatureTokenAccount(
+        acc.unixTimestamp,
+        creator.publicKey,
+        WSOL_ADDRESS,
+        program
+        );
+        
+        let approveSubmitterIx = await addApprovedSubmittersInstruction(
+        acc.unixTimestamp,
+        creator.publicKey,
+        submitter.publicKey,
+        program
+        )
+        
+        tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+
+        // Should be false already
+        assert.equal(acc.requestSubmitted, false);
+        const submitRequestIx = await submitRequestInstruction(
+            acc.unixTimestamp, 
+            creator.publicKey, 
             submitter.publicKey,
+            submitter_wsol_account.address,
             program
-            )
+        )
+        let fund_feature_ix = await fundFeatureInstruction(
+        amount,
+        acc.unixTimestamp,
+        creator.publicKey,
+        WSOL_ADDRESS,
+        program
+        );
+
+        tx = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix).add(submitRequestIx), [submitter, creator])
+
+        try {
+        // testing funder_cancel = true & payout_cancel = false
+        await program.methods.cancelFeature()
+        .accounts({
+            creator: creator.publicKey,
+            creatorTokenAccount: creator_wsol_account.address,
+            featureDataAccount: feature_data_account,
+            featureTokenAccount: feature_token_account,
+            programAuthority: program_authority,
+            tokenProgram: TOKEN_PROGRAM_ID
+        }).signers([creator]).rpc();
             
-            tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
-
-            // Should be false already
-            assert.equal(acc.requestSubmitted, false);
-            const submitRequestIx = await submitRequestInstruction(
-                acc.unixTimestamp, 
-                creator.publicKey, 
-                submitter.publicKey,
-                submitter_wsol_account.address,
-                program
-            )
-            let fund_feature_ix = await fundFeatureInstruction(
-            amount,
-            acc.unixTimestamp,
-            creator.publicKey,
-            WSOL_ADDRESS,
-            program
-            );
+        } catch (error) {
+          assert.equal((error as AnchorError).error.errorMessage, "Cannot Cancel Feature")
+        }
 
-            tx = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix).add(submitRequestIx), [submitter, creator])
-        
-            // creator votes to cancel feature(VoteToCancel)
-            let voteToCancelIxByCreator = await voteToCancelInstruction(
+        try {
+        // testing funder_cancel = true & request_submitted = false
+        let denyRequestIx = await denyRequestInstruction(
             acc.unixTimestamp,
             creator.publicKey,
-            creator.publicKey,
-            true,
+            submitter.publicKey,
             program
-            );
-
+        );
+        tx = await provider.sendAndConfirm(new Transaction().add(denyRequestIx), [creator])
+        await program.methods.cancelFeature()
+        .accounts({
+            creator: creator.publicKey,
+            creatorTokenAccount: creator_wsol_account.address,
+            featureDataAccount: feature_data_account,
+            featureTokenAccount: feature_token_account,
+            programAuthority: program_authority,
+            tokenProgram: TOKEN_PROGRAM_ID
+        }).signers([creator]).rpc();
+            
+        } catch (error) {
+          assert.equal((error as AnchorError).error.errorMessage, "Cannot Cancel Feature")
+        }
+        // creator votes to cancel feature(VoteToCancel)
+        let voteToCancelIxByCreator = await voteToCancelInstruction(
+          acc.unixTimestamp,
+          creator.publicKey,
+          creator.publicKey,
+          true,
+          program
+        );
 
-            try {
-            // testing funder_cancel = true & payout_cancel = false
-            await program.methods.cancelFeature()
-            .accounts({
-                creator: creator.publicKey,
-                creatorTokenAccount: creator_wsol_account.address,
-                featureDataAccount: feature_data_account,
-                featureTokenAccount: feature_token_account,
-                programAuthority: program_authority,
-                tokenProgram: TOKEN_PROGRAM_ID
-            }).signers([creator]).rpc();
-                
-            } catch (error) {
-            assert.equal((error as AnchorError).error.errorMessage, "Cannot Cancel Feature")
-            }
-
-            try {
-            // testing funder_cancel = true & request_submitted = false
-            let denyRequestIx = await denyRequestInstruction(
-                acc.unixTimestamp,
-                creator.publicKey,
-                submitter.publicKey,
-                program
-            );
-            tx = await provider.sendAndConfirm(new Transaction().add(denyRequestIx), [creator])
-            await program.methods.cancelFeature()
-            .accounts({
-                creator: creator.publicKey,
-                creatorTokenAccount: creator_wsol_account.address,
-                featureDataAccount: feature_data_account,
-                featureTokenAccount: feature_token_account,
-                programAuthority: program_authority,
-                tokenProgram: TOKEN_PROGRAM_ID
-            }).signers([creator]).rpc();
-                
-            } catch (error) {
-            assert.equal((error as AnchorError).error.errorMessage, "Cannot Cancel Feature")
-            }
-
-            // creator votes to not cancel feature(voteToCancel)
-            try{
-            let voteToCancelIxBySubmitter = await voteToCancelInstruction(
-                acc.unixTimestamp,
-                creator.publicKey,
-                submitter.publicKey,
-                false,
-                program
-                );
-            let creatorRevotesToCancelIx = await voteToCancelInstruction(
-                acc.unixTimestamp,
-                creator.publicKey,
-                creator.publicKey,
-                false,
-                program
+        // creator votes to not cancel feature(voteToCancel)
+        try{
+          let voteToCancelIxBySubmitter = await voteToCancelInstruction(
+              acc.unixTimestamp,
+              creator.publicKey,
+              submitter.publicKey,
+              false,
+              program
             );
-
-                tx = await provider.sendAndConfirm(
-                new Transaction().add(voteToCancelIxByCreator).add(voteToCancelIxBySubmitter).add(creatorRevotesToCancelIx), 
-                [creator, submitter]
-                );
-    
-                acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-                assert.equal(acc.payoutCancel, false);
-                assert.equal(acc.funderCancel, false);
-                assert.equal(acc.requestSubmitted, false)
-    
-
-                await program.methods.cancelFeature()
-                .accounts({
-                creator: creator.publicKey,
-                creatorTokenAccount: creator_wsol_account.address,
-                featureDataAccount: feature_data_account,
-                featureTokenAccount: feature_token_account,
-                programAuthority: program_authority,
-                tokenProgram: TOKEN_PROGRAM_ID
-                }).signers([creator]).rpc()
+          let creatorRevotesToCancelIx = await voteToCancelInstruction(
+              acc.unixTimestamp,
+              creator.publicKey,
+              creator.publicKey,
+              false,
+              program
+          );
+
+          tx = await provider.sendAndConfirm(
+          new Transaction().add(voteToCancelIxByCreator).add(voteToCancelIxBySubmitter).add(creatorRevotesToCancelIx), 
+          [creator, submitter]
+          );
+
+          acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+          assert.equal(acc.payoutCancel, false);
+          assert.equal(acc.funderCancel, false);
+          assert.equal(acc.requestSubmitted, false)
+
+          await program.methods.cancelFeature()
+          .accounts({
+            creator: creator.publicKey,
+            creatorTokenAccount: creator_wsol_account.address,
+            featureDataAccount: feature_data_account,
+            featureTokenAccount: feature_token_account,
+            programAuthority: program_authority,
+            tokenProgram: TOKEN_PROGRAM_ID
+          }).signers([creator]).rpc()
         }catch(err)
         {
             assert.equal((err as AnchorError).error.errorMessage, "Cannot Cancel Feature")
         }
-            // submitter votes to cancel Feature(VoteToCancel)
-            let voteToCancelIxBySubmitter = await voteToCancelInstruction(
-            acc.unixTimestamp,
-            creator.publicKey,
-            submitter.publicKey,
-            true,
-            program
-            );
+        // submitter votes to cancel Feature(VoteToCancel)
+        let voteToCancelIxBySubmitter = await voteToCancelInstruction(
+          acc.unixTimestamp,
+          creator.publicKey,
+          submitter.publicKey,
+          true,
+          program
+        );
 
-            tx = await provider.sendAndConfirm(
-            new Transaction().add(voteToCancelIxByCreator).add(voteToCancelIxBySubmitter), 
-            [creator, submitter]
-            );
+        tx = await provider.sendAndConfirm(
+          new Transaction().add(voteToCancelIxByCreator).add(voteToCancelIxBySubmitter), 
+          [creator, submitter]
+        );
 
-            const creator_token_account_before_balance = await provider.connection.getTokenAccountBalance(creator_wsol_account.address)
+        const creator_token_account_before_balance = await provider.connection.getTokenAccountBalance(creator_wsol_account.address)
 
-            let cancelFeatureIx = await cancelFeatureInstruction(
-            acc.unixTimestamp,
-            creator.publicKey,
-            creator_wsol_account.address,
-            WSOL_ADDRESS,
-            program
-            )
+        let cancelFeatureIx = await cancelFeatureInstruction(
+          acc.unixTimestamp,
+          creator.publicKey,
+          creator_wsol_account.address,
+          WSOL_ADDRESS,
+          program
+        )
 
-            tx = await provider.sendAndConfirm(new Transaction().add(cancelFeatureIx), [creator])
-            console.log("cancel Feature Tx = ", tx);
+        tx = await provider.sendAndConfirm(new Transaction().add(cancelFeatureIx), [creator])
+        console.log("cancel Feature Tx = ", tx);
 
-            const creator_token_account_after_balance = await provider.connection.getTokenAccountBalance(creator_wsol_account.address)
-            assert.equal(
-            creator_token_account_after_balance.value.amount, 
-            (
-                ((LANCER_FEE + COMPLETER_FEE) * amount) + parseInt(creator_token_account_before_balance.value.amount)
-            ).toString()
-            );
-            let closed_token_account = await provider.connection.getBalance(feature_token_account);
-            let closed_data_account = await provider.connection.getBalance(feature_data_account);
+        const creator_token_account_after_balance = await provider.connection.getTokenAccountBalance(creator_wsol_account.address)
+        assert.equal(
+        creator_token_account_after_balance.value.amount, 
+        (
+            ((LANCER_FEE + COMPLETER_FEE) * amount) + parseInt(creator_token_account_before_balance.value.amount)
+        ).toString()
+        );
+        let closed_token_account = await provider.connection.getBalance(feature_token_account);
+        let closed_data_account = await provider.connection.getBalance(feature_data_account);
 
-            assert.equal(0, parseInt(closed_data_account.toString()));
-            assert.equal(0, parseInt(closed_token_account.toString()));
+        assert.equal(0, parseInt(closed_data_account.toString()));
+        assert.equal(0, parseInt(closed_token_account.toString()));
 
     })
 
-
     it ("cancel vote if creator = submitter", async () => {
         let creator = await createKeypair(provider);
         const submitter = creator;
@@ -378,9 +374,9 @@ describe("cancel feature tests", () => {
         await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
         const ix = await createFeatureFundingAccountInstruction(
-        WSOL_ADDRESS,
-        creator.publicKey,
-        program
+          WSOL_ADDRESS,
+          creator.publicKey,
+          program
         );
 
         const [program_authority] = await findProgramAuthority(program);
@@ -406,17 +402,16 @@ describe("cancel feature tests", () => {
         let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         
         const [feature_data_account] = await findFeatureAccount(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+          acc.unixTimestamp,
+          creator.publicKey,
+          program
         );
-
         
         let approveSubmitterIx = await addApprovedSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        submitter.publicKey,
-        program
+          acc.unixTimestamp,
+          creator.publicKey,
+          submitter.publicKey,
+          program
         )
         
         tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
@@ -435,11 +430,11 @@ describe("cancel feature tests", () => {
         
         // creator cancels feature(VoteToCancel)
         let voteToCancelIx = await voteToCancelInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        creator.publicKey,
-        true,
-        program
+          acc.unixTimestamp,
+          creator.publicKey,
+          creator.publicKey,
+          true,
+          program
         );
         tx = await provider.sendAndConfirm(new Transaction().add(voteToCancelIx), [creator]);
 
@@ -453,5 +448,4 @@ describe("cancel feature tests", () => {
 
     })
 
-
 })
\ No newline at end of file
diff --git a/tests/deny_request.ts b/tests/deny_request.ts
index e8b3032..79b55bf 100644
--- a/tests/deny_request.ts
+++ b/tests/deny_request.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
diff --git a/tests/fund_feature.ts b/tests/fund_feature.ts
index e95b88e..56b5533 100644
--- a/tests/fund_feature.ts
+++ b/tests/fund_feature.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -120,5 +120,319 @@ describe("fund feature tests", () => {
     
       });
     
+      it ("if admin = creator, creator does not pay extra 5% upfront", async () => {
+        let payer = await createKeypair(provider);
+        let funder = await provider.publicKey;
+        const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
+            provider.connection,
+            payer,
+            WSOL_ADDRESS,
+            funder
+        );
+    
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+    
+        const create_FFA_ix = await createFeatureFundingAccountInstruction(
+          WSOL_ADDRESS,
+          funder,
+          program
+        );
+        const tx1 = await provider.sendAndConfirm(new Transaction().add(create_FFA_ix), []);
+        console.log("createFFA(2nd test) transaction signature", tx1);
+    
+        // transfer WSOL
+        const accounts = await provider.connection.getParsedProgramAccounts(
+          program.programId, 
+          {
+            filters: [
+              {
+                dataSize: 381, // number of bytes
+              },
+              {
+                memcmp: {
+                  offset: 8, // number of bytes
+                  bytes: funder.toBase58(), // base58 encoded string
+                },
+              },
+            ],      
+          }
+        );
+    
+        let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+        const [feature_token_account] = await findFeatureTokenAccount(
+          acc.unixTimestamp,
+          funder,
+          WSOL_ADDRESS,
+          program
+        );
+        const [feature_data_account] = await findFeatureAccount(
+          acc.unixTimestamp,
+          funder,
+          program
+        );
+        const [program_authority] = await findProgramAuthority(program);
+
+        let bal = await provider.connection.getTokenAccountBalance(creator_wsol_account.address);
+        let amount = bal.value.uiAmount * LAMPORTS_PER_SOL;
+        // test insuffiecient 
+        try {
+          await program.methods.fundFeature(new anchor.BN(amount + 1))
+            .accounts({
+              creator: funder,
+              fundsMint: WSOL_ADDRESS,
+              creatorTokenAccount: creator_wsol_account.address,
+              featureDataAccount: feature_data_account,
+              featureTokenAccount: feature_token_account,
+              programAuthority: program_authority,
+              tokenProgram: TOKEN_PROGRAM_ID,
+              systemProgram: SystemProgram.programId,
+            }).signers([]).rpc();
+        } catch (err) {
+          assert.equal((err as AnchorError).error.errorMessage, "Insufficient funds to pay lancer fee")
+        }
+   
+        // check balaance before funding feature
+        const FFA_token_account_before_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+        let fund_feature_ix = await fundFeatureInstruction(
+          amount,
+          acc.unixTimestamp,
+          funder,
+          WSOL_ADDRESS,
+          program
+        );
+    
+          const tx2 = await provider.sendAndConfirm(new Transaction().add(fund_feature_ix), []);
+          console.log("fundFeature transaction signature", tx2);
+          const FFA_token_account_after_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+          assert.equal(
+            FFA_token_account_after_balance.value.amount, 
+            (
+              (amount) + parseInt(FFA_token_account_before_balance.value.amount)
+            ).toString()
+          );
+          acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+    
+          assert.equal(acc.amount.toNumber(), amount)
+
+      })
+
+      it ("test amount gets added on if fundFeature is called twice", async () => {
+        let creator = await createKeypair(provider);
+    
+        const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
+            provider.connection,
+            creator,
+            WSOL_ADDRESS,
+            creator.publicKey
+        );
+
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+    
+        const create_FFA_ix = await createFeatureFundingAccountInstruction(
+          WSOL_ADDRESS,
+          creator.publicKey,
+          program
+        );
+        const tx1 = await provider.sendAndConfirm(new Transaction().add(create_FFA_ix), [creator]);
+        console.log("createFFA(2nd test) transaction signature", tx1);
+    
+        // transfer WSOL
+        const accounts = await provider.connection.getParsedProgramAccounts(
+          program.programId, 
+          {
+            filters: [
+              {
+                dataSize: 381, // number of bytes
+              },
+              {
+                memcmp: {
+                  offset: 8, // number of bytes
+                  bytes: creator.publicKey.toBase58(), // base58 encoded string
+                },
+              },
+            ],      
+          }
+        );
+    
+        let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+        const [feature_token_account] = await findFeatureTokenAccount(
+          acc.unixTimestamp,
+          creator.publicKey,
+          WSOL_ADDRESS,
+          program
+        );
+        const [feature_data_account] = await findFeatureAccount(
+          acc.unixTimestamp,
+          creator.publicKey,
+          program
+        );
+        const [program_authority] = await findProgramAuthority(program);
+    
+        // test insuffiecient 
+        try {
+          await program.methods.fundFeature(new anchor.BN(WSOL_AMOUNT))
+            .accounts({
+              creator: creator.publicKey,
+              fundsMint: WSOL_ADDRESS,
+              creatorTokenAccount: creator_wsol_account.address,
+              featureDataAccount: feature_data_account,
+              featureTokenAccount: feature_token_account,
+              programAuthority: program_authority,
+              tokenProgram: TOKEN_PROGRAM_ID,
+              systemProgram: SystemProgram.programId,
+            }).signers([creator]).rpc()
+        } catch (err) {
+          assert.equal((err as AnchorError).error.errorMessage, "Insufficient funds to pay lancer fee")
+        }
+    
+        //add more SOL
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+    
+        // check balaance before funding feature
+        const FFA_token_account_before_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+        let fund_feature_ix1 = await fundFeatureInstruction(
+          WSOL_AMOUNT,
+          acc.unixTimestamp,
+          creator.publicKey,
+          WSOL_ADDRESS,
+          program
+        );
+        let fund_feature_ix2 = await fundFeatureInstruction(
+          WSOL_AMOUNT,
+          acc.unixTimestamp,
+          creator.publicKey,
+          WSOL_ADDRESS,
+          program
+        );
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+
+        const tx2 = await provider.sendAndConfirm(
+          new Transaction()
+            .add(fund_feature_ix1)
+            .add(fund_feature_ix2),
+            [creator]
+        );
+
+          console.log("fundFeature transaction signature", tx2);
+          const FFA_token_account_after_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+          assert.equal(
+            FFA_token_account_after_balance.value.amount, 
+            (//token account needs to be able to pay both lancer and completer
+              ((LANCER_FEE + COMPLETER_FEE) * (WSOL_AMOUNT + WSOL_AMOUNT)) + parseInt(FFA_token_account_before_balance.value.amount)
+            ).toString()
+          );
+          acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+          
+          assert.equal(acc.amount.toNumber(), WSOL_AMOUNT + WSOL_AMOUNT)
+
+      })
+
+      it ("(admin = creator)test amount gets added but still no lancer fee if fundFeature is called twice", async () => {
+        let payer = await createKeypair(provider);
+        let funder = await provider.publicKey;
+
+        const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
+            provider.connection,
+            payer,
+            WSOL_ADDRESS,
+            funder
+        );
+
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+
+        const create_FFA_ix = await createFeatureFundingAccountInstruction(
+          WSOL_ADDRESS,
+          funder,
+          program
+        );
+        const tx1 = await provider.sendAndConfirm(new Transaction().add(create_FFA_ix), []);
+        console.log("createFFA(2nd test) transaction signature", tx1);
+    
+        // transfer WSOL
+        const accounts = await provider.connection.getParsedProgramAccounts(
+          program.programId, 
+          {
+            filters: [
+              {
+                dataSize: 381, // number of bytes
+              },
+              {
+                memcmp: {
+                  offset: 8, // number of bytes
+                  bytes: funder.toBase58(), // base58 encoded string
+                },
+              },
+            ],      
+          }
+        );
+    
+        let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+        const [feature_token_account] = await findFeatureTokenAccount(
+          acc.unixTimestamp,
+          funder,
+          WSOL_ADDRESS,
+          program
+        );
+        const [feature_data_account] = await findFeatureAccount(
+          acc.unixTimestamp,
+          funder,
+          program
+        );
+        const [program_authority] = await findProgramAuthority(program);
+    
+        // test insuffiecient 
+        try {
+          await program.methods.fundFeature(new anchor.BN(WSOL_AMOUNT + WSOL_AMOUNT))
+            .accounts({
+              creator: funder,
+              fundsMint: WSOL_ADDRESS,
+              creatorTokenAccount: creator_wsol_account.address,
+              featureDataAccount: feature_data_account,
+              featureTokenAccount: feature_token_account,
+              programAuthority: program_authority,
+              tokenProgram: TOKEN_PROGRAM_ID,
+              systemProgram: SystemProgram.programId,
+            }).signers([]).rpc()
+        } catch (err) {
+          assert.equal((err as AnchorError).error.errorMessage, "Insufficient funds to pay lancer fee")
+        }
+    
+        // check balaance before funding feature
+        const FFA_token_account_before_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+        let fund_feature_ix1 = await fundFeatureInstruction(
+          WSOL_AMOUNT,
+          acc.unixTimestamp,
+          funder,
+          WSOL_ADDRESS,
+          program
+        );
+        let fund_feature_ix2 = await fundFeatureInstruction(
+          WSOL_AMOUNT,
+          acc.unixTimestamp,
+          funder,
+          WSOL_ADDRESS,
+          program
+        );
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+
+        const tx2 = await provider.sendAndConfirm(
+          new Transaction()
+            .add(fund_feature_ix1)
+            .add(fund_feature_ix2),
+            []
+        );
+        console.log("fundFeature transaction signature", tx2);
+
+      const FFA_token_account_after_balance = await provider.connection.getTokenAccountBalance(feature_token_account)
+          assert.equal(
+            FFA_token_account_after_balance.value.amount, 
+            (//token account needs to be able to pay both lancer and completer
+              ((WSOL_AMOUNT + WSOL_AMOUNT)) + parseInt(FFA_token_account_before_balance.value.amount)
+            ).toString()
+          );
+          acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+          
+          assert.equal(acc.amount.toNumber(), WSOL_AMOUNT + WSOL_AMOUNT)
 
+      })
 })
\ No newline at end of file
diff --git a/tests/integration.ts b/tests/integration.ts
index 402cf36..083a30c 100644
--- a/tests/integration.ts
+++ b/tests/integration.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -23,7 +23,6 @@ describe("integration tests", () => {
     );
     const WSOL_AMOUNT = 2 * LAMPORTS_PER_SOL;
 
-
   it("test createFFAInstruction works", async () => {
     // Add your test here.
     let creator = await createKeypair(provider);
@@ -346,7 +345,6 @@ describe("integration tests", () => {
 
   })
 
-
   it ("withdraw tokens after depositing ", async () => {
     let creator = await createKeypair(provider);
 
@@ -511,5 +509,4 @@ describe("integration tests", () => {
       )
   } )
   
-
 });
diff --git a/tests/submit_request.ts b/tests/submit_request.ts
index 213b79e..0679cbc 100644
--- a/tests/submit_request.ts
+++ b/tests/submit_request.ts
@@ -7,7 +7,7 @@ import { COMPLETER_FEE, LANCER_FEE, LANCER_FEE_THIRD_PARTY, MINT_DECIMALS, MONO_
 import { ComputeBudgetInstruction, ComputeBudgetProgram, Keypair, LAMPORTS_PER_SOL, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from "@solana/web3.js";
 import { add_more_token, createKeypair } from "./utils";
 import { findFeatureAccount, findFeatureTokenAccount, findLancerCompanyTokens, findLancerCompleterTokens, findLancerProgramAuthority, findLancerTokenAccount, findProgramAuthority, findProgramMintAuthority } from "../sdk/pda";
-import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, createLancerTokensInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
+import { addApprovedSubmittersInstruction, approveRequestInstruction, approveRequestMultipleTransaction, approveRequestThirdPartyInstruction, cancelFeatureInstruction, createFeatureFundingAccountInstruction, createLancerTokenAccountInstruction, denyRequestInstruction, enableMultipleSubmittersInstruction, fundFeatureInstruction, removeApprovedSubmittersInstruction, setShareMultipleSubmittersInstruction, submitRequestInstruction, submitRequestMultipleInstruction, voteToCancelInstruction, withdrawTokensInstruction } from "../sdk/instructions";
 import { assert } from "chai";
 import { min } from "bn.js";
 
@@ -24,97 +24,97 @@ describe("submit Request tests", () => {
       const WSOL_AMOUNT = 2 * LAMPORTS_PER_SOL;
 
     it ("test submitRequest", async () => {
-            // Add your test here.
-            let creator = await createKeypair(provider);
-            const submitter = await createKeypair(provider);
-            ;
-            const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
-                provider.connection,
-                creator,
-                WSOL_ADDRESS,
-                creator.publicKey
-            );
-            const submitter_wsol_account = await getOrCreateAssociatedTokenAccount(
+        // Add your test here.
+        let creator = await createKeypair(provider);
+        const submitter = await createKeypair(provider);
+        ;
+        const creator_wsol_account = await getOrCreateAssociatedTokenAccount(
+            provider.connection,
+            creator,
+            WSOL_ADDRESS,
+            creator.publicKey
+        );
+        const submitter_wsol_account = await getOrCreateAssociatedTokenAccount(
             provider.connection,
             submitter,
             WSOL_ADDRESS,
             submitter.publicKey
-            );
-            await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
-        
-            const ix = await createFeatureFundingAccountInstruction(
+        );
+        await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
+
+        const ix = await createFeatureFundingAccountInstruction(
             WSOL_ADDRESS,
             creator.publicKey,
             program
-            );
-        
-            const [program_authority] = await findProgramAuthority(program);
-        
-            let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
-            const accounts = await provider.connection.getParsedProgramAccounts(
-            program.programId, 
+        );
+
+        const [program_authority] = await findProgramAuthority(program);
+
+        let tx = await provider.sendAndConfirm(new Transaction().add(ix), [creator]);
+        const accounts = await provider.connection.getParsedProgramAccounts(
+        program.programId, 
+        {
+            filters: [
             {
-                filters: [
-                {
-                    dataSize: 381, // number of bytes
-                },
-                {
-                    memcmp: {
-                    offset: 8, // number of bytes
-                    bytes: creator.publicKey.toBase58(), // base58 encoded string
-                    },
+                dataSize: 381, // number of bytes
+            },
+            {
+                memcmp: {
+                offset: 8, // number of bytes
+                bytes: creator.publicKey.toBase58(), // base58 encoded string
                 },
-                ],      
-            }
-            );
+            },
+            ],      
+        }
+        );
+
+        let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         
-            let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-            
-            const [feature_data_account] = await findFeatureAccount(
+        const [feature_data_account] = await findFeatureAccount(
             acc.unixTimestamp,
             creator.publicKey,
             program
-            );
+        );
+
         
-            
-            let approveSubmitterIx = await addApprovedSubmittersInstruction(
-            acc.unixTimestamp,
-            creator.publicKey,
+        let approveSubmitterIx = await addApprovedSubmittersInstruction(
+        acc.unixTimestamp,
+        creator.publicKey,
+        submitter.publicKey,
+        program
+        )
+        
+        tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
+
+        // Should be false already
+        assert.equal(acc.requestSubmitted, false);
+        const submitRequestIx = await submitRequestInstruction(
+            acc.unixTimestamp, 
+            creator.publicKey, 
             submitter.publicKey,
+            submitter_wsol_account.address,
             program
-            )
-            
-            tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitterIx), [creator]); 
-
-            // Should be false already
-            assert.equal(acc.requestSubmitted, false);
-            const submitRequestIx = await submitRequestInstruction(
-                acc.unixTimestamp, 
-                creator.publicKey, 
-                submitter.publicKey,
-                submitter_wsol_account.address,
-                program
-            )
-
-            tx = await provider.sendAndConfirm(new Transaction().add(submitRequestIx), [submitter])
-            acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
-
-            assert.equal(acc.requestSubmitted, true);
-            assert.equal(acc.currentSubmitter.toString(), submitter.publicKey.toString());
-            assert.equal(acc.payoutAccount.toString(), submitter_wsol_account.address.toString())
-
-            try {
-                await program.methods.submitRequest()
-                .accounts({
-                creator: creator.publicKey,
-                submitter: submitter.publicKey,
-                payoutAccount: submitter_wsol_account.address,
-                featureDataAccount: feature_data_account,
-                }).signers([submitter]).rpc()
-            }catch(err)
-            {
-                assert.equal((err as AnchorError).error.errorMessage, "There is an active request already present")
-            }        
+        )
+
+        tx = await provider.sendAndConfirm(new Transaction().add(submitRequestIx), [submitter])
+        acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
+
+        assert.equal(acc.requestSubmitted, true);
+        assert.equal(acc.currentSubmitter.toString(), submitter.publicKey.toString());
+        assert.equal(acc.payoutAccount.toString(), submitter_wsol_account.address.toString())
+
+        try {
+            await program.methods.submitRequest()
+            .accounts({
+            creator: creator.publicKey,
+            submitter: submitter.publicKey,
+            payoutAccount: submitter_wsol_account.address,
+            featureDataAccount: feature_data_account,
+            }).signers([submitter]).rpc()
+        }catch(err)
+        {
+            assert.equal((err as AnchorError).error.errorMessage, "There is an active request already present")
+        }        
     })
 
     it ("test submitRequest fails when enable multiple submitters is turmed on", async () => {
@@ -184,9 +184,9 @@ describe("submit Request tests", () => {
         assert.equal(acc.requestSubmitted, false);
 
         let enable_multiple_submitters_ix = await enableMultipleSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            program
         );
         await provider.sendAndConfirm(new Transaction().add(enable_multiple_submitters_ix), [creator]);
 
@@ -223,9 +223,9 @@ describe("submit Request tests", () => {
         await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
         const ix = await createFeatureFundingAccountInstruction(
-        WSOL_ADDRESS,
-        creator.publicKey,
-        program
+            WSOL_ADDRESS,
+            creator.publicKey,
+            program
         );
 
         const [program_authority] = await findProgramAuthority(program);
@@ -251,9 +251,9 @@ describe("submit Request tests", () => {
         let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         
         const [feature_data_account] = await findFeatureAccount(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            program
         );
 
         // Should be false already
@@ -294,9 +294,9 @@ describe("submit Request tests", () => {
         await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
         const ix = await createFeatureFundingAccountInstruction(
-        WSOL_ADDRESS,
-        creator.publicKey,
-        program
+            WSOL_ADDRESS,
+            creator.publicKey,
+            program
         );
 
         const [program_authority] = await findProgramAuthority(program);
@@ -322,43 +322,43 @@ describe("submit Request tests", () => {
         let acc = await program.account.featureDataAccount.fetch(accounts[0].pubkey);
         
         const [feature_data_account] = await findFeatureAccount(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            program
         );
 
         let approveSubmitter1Ix = await addApprovedSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        submitter1.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            submitter1.publicKey,
+            program
         )
         let approveSubmitter2Ix = await addApprovedSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        submitter2.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            submitter2.publicKey,
+            program
         )
         
         tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitter1Ix,approveSubmitter2Ix), [creator]); 
 
         try
         { 
-        await program.methods.submitRequestMultiple()
-        .accounts({
-            creator: creator.publicKey,
-            submitter: submitter1.publicKey,
-            featureDataAccount: feature_data_account,
-        }).signers([submitter1]).rpc();
+            await program.methods.submitRequestMultiple()
+            .accounts({
+                creator: creator.publicKey,
+                submitter: submitter1.publicKey,
+                featureDataAccount: feature_data_account,
+            }).signers([submitter1]).rpc();
         }catch(err)
         {
-        assert.equal((err as AnchorError).error.errorMessage, "This Instruction is used for only Multiple submitters.");
+            assert.equal((err as AnchorError).error.errorMessage, "This Instruction is used for only Multiple submitters.");
         }
 
         let enable_multiple_submitters_ix = await enableMultipleSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            program
         );
         await provider.sendAndConfirm(new Transaction().add(enable_multiple_submitters_ix), [creator]);
 
@@ -392,17 +392,17 @@ describe("submit Request tests", () => {
             creator.publicKey
         );
         const submitter1_wsol_account = await getOrCreateAssociatedTokenAccount(
-        provider.connection,
-        submitter1,
-        WSOL_ADDRESS,
-        submitter1.publicKey
+            provider.connection,
+            submitter1,
+            WSOL_ADDRESS,
+            submitter1.publicKey
         );
         await add_more_token(provider, creator_wsol_account.address, WSOL_AMOUNT);
 
         const ix = await createFeatureFundingAccountInstruction(
-        WSOL_ADDRESS,
-        creator.publicKey,
-        program
+            WSOL_ADDRESS,
+            creator.publicKey,
+            program
         );
 
         const [program_authority] = await findProgramAuthority(program);
@@ -434,37 +434,37 @@ describe("submit Request tests", () => {
         );
 
         let approveSubmitter1Ix = await addApprovedSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        submitter1.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            submitter1.publicKey,
+            program
         )
         let approveSubmitter2Ix = await addApprovedSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        submitter2.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            submitter2.publicKey,
+            program
         )
         
         tx = await provider.sendAndConfirm(new Transaction().add(approveSubmitter1Ix,approveSubmitter2Ix), [creator]); 
 
         try
         { 
-        await program.methods.submitRequestMultiple()
-        .accounts({
-            creator: creator.publicKey,
-            submitter: submitter1.publicKey,
-            featureDataAccount: feature_data_account,
-        }).signers([submitter1]).rpc();
+            await program.methods.submitRequestMultiple()
+            .accounts({
+                creator: creator.publicKey,
+                submitter: submitter1.publicKey,
+                featureDataAccount: feature_data_account,
+            }).signers([submitter1]).rpc();
         }catch(err)
         {
-        assert.equal((err as AnchorError).error.errorMessage, "This Instruction is used for only Multiple submitters.");
+            assert.equal((err as AnchorError).error.errorMessage, "This Instruction is used for only Multiple submitters.");
         }
 
         let enable_multiple_submitters_ix = await enableMultipleSubmittersInstruction(
-        acc.unixTimestamp,
-        creator.publicKey,
-        program
+            acc.unixTimestamp,
+            creator.publicKey,
+            program
         );
         await provider.sendAndConfirm(new Transaction().add(enable_multiple_submitters_ix), [creator]);
 
